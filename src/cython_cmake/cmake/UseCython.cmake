#.rst:
#
# The following functions are defined:
#
# .. cmake:command:: add_cython_target
#
# Create a custom rule to generate the source code for a Python extension module
# using cython.
#
#   add_cython_target(<Name> [<CythonInput>]
#                     [C | CXX]
#                     [PY2 | PY3]
#                     [OUTPUT_VAR <OutputVar>])
#
# ``<Name>`` is the name of the new target, and ``<CythonInput>``
# is the path to a cython source file.  Note that, despite the name, no new
# targets are created by this function.  Instead, see ``OUTPUT_VAR`` for
# retrieving the path to the generated source for subsequent targets.
#
# If only ``<Name>`` is provided, and it ends in the ".pyx" extension, then it
# is assumed to be the ``<CythonInput>``.  The name of the input without the
# extension is used as the target name.  If only ``<Name>`` is provided, and it
# does not end in the ".pyx" extension, then the ``<CythonInput>`` is assumed to
# be ``<Name>.pyx``.
#
# The Cython include search path is amended with any entries found in the
# ``INCLUDE_DIRECTORIES`` property of the directory containing the
# ``<CythonInput>`` file.  Use ``include_directories`` to add to the Cython
# include search path.
#
# Options:
#
# ``TARGET_LANGUAGE [C | CXX]``
#   Force the generation of either a C or C++ file. By default, a C file is
#   generated, unless the C language is not enabled for the project; in this
#   case, a C++ file is generated by default.
#
# ``C | CXX`` (deprecated)
#   Force the generation of either a C or C++ file.  By default, a C file is
#   generated, unless the C language is not enabled for the project; in this
#   case, a C++ file is generated by default.
#
# ``LANGUAGE_LEVEL [2 | 3 | 3str]``
#   Force compilation using either Python-2, Python-3 or Python-3str syntax and
#   code semantics.
#   By default, Python-3str syntax and semantics are used if the major version
#   of Python found is 3 and Cython >=3 is used. Otherwise, Python-2 syntax and
#   semantics are used.
#   Using the Python-3str syntax and semantics means there cython does not assume
#   unicode is used by by default for string literals under Python 2
#
# ``PY2 | PY3`` (deprecated)
#   Force compilation using either Python-2 or Python-3 syntax and code
#   semantics.  By default, Python-2 syntax and semantics are used if the major
#   version of Python found is 2.  Otherwise, Python-3 syntax and semantics are
#   used.
#
# ``OUTPUT_VAR <OutputVar>``
#   Set the variable ``<OutputVar>`` in the parent scope to the path to the
#   generated source file.  By default, ``<Name>`` is used as the output
#   variable name.
#
# Defined variables:
#
# ``<OutputVar>``
#   The path of the generated source file.
#
# Cache variables that affect the behavior include:
#
# ``CYTHON_ANNOTATE``
#   Whether to create an annotated .html file when compiling.
#
# ``CYTHON_FLAGS``
#   Additional flags to pass to the Cython compiler.
#
# Example usage
# ^^^^^^^^^^^^^
#
# .. code-block:: cmake
#
#   find_package(Cython)
#
#   # Note: In this case, either one of these arguments may be omitted; their
#   # value would have been inferred from that of the other.
#   add_cython_target(cy_code cy_code.pyx)
#
#   add_library(cy_code MODULE ${cy_code})
#   target_link_libraries(cy_code ...)
#
#=============================================================================
# Copyright 2011 Kitware, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#=============================================================================

# Configuration options.
set(CYTHON_ANNOTATE OFF
    CACHE BOOL "Create an annotated .html file when compiling *.pyx.")

set(CYTHON_FLAGS "" CACHE STRING
    "Extra flags to the cython compiler.")
mark_as_advanced(CYTHON_ANNOTATE CYTHON_FLAGS)

function(add_cython_target _name)
  set(_deprecated_options C CXX PY2 PY3)
  set(_options )
  set(_one_value TARGET_LANGUAGE OUTPUT_VAR)
  set(_multi_value )

  cmake_parse_arguments(_args
    "${_options} ${_deprecated_options}"
    "${_one_value}"
    "${_multi_value}"
    ${ARGN}
    )

  # Support deprecated options: C, CXX
  if(NOT _args_TARGET_LANGUAGE)
    if(_args_C)
      set(_args_TARGET_LANGUAGE "C")
    endif()
    if(_args_CXX)
      set(_args_TARGET_LANGUAGE "CXX")
    endif()
  endif()

  # Support deprecated options: PY2, PY3
  if(NOT _args_LANGUAGE_LEVEL)
    if(_args_PY2)
      set(_args_LANGUAGE_LEVEL "2")
    endif()
    if(_args_PY3)
      set(_args_LANGUAGE_LEVEL "3")
    endif()
  endif()

  list(GET _args_UNPARSED_ARGUMENTS 0 _arg0)

  # if provided, use _arg0 as the input file path
  if(_arg0)
    set(_source_file ${_arg0})

  # otherwise, must determine source file from name, or vice versa
  else()
    get_filename_component(_name_ext "${_name}" EXT)

    # if extension provided, _name is the source file
    if(_name_ext)
      set(_source_file ${_name})
      get_filename_component(_name "${_source_file}" NAME_WE)

    # otherwise, assume the source file is ${_name}.pyx
    else()
      set(_source_file ${_name}.pyx)
    endif()
  endif()

  # Set target language
  get_property(_languages GLOBAL PROPERTY ENABLED_LANGUAGES)
  set(_target_language ${_args_TARGET_LANGUAGE})
  if(NOT _target_language)
    if("C" IN_LIST _languages)
      set(_target_language "C")
    elseif("CXX" IN_LIST _languages)
      set(_target_language "CXX")
    endif()
  else()
    if(NOT _target_language MATCHES "^(C|CXX)$")
      message(FATAL_ERROR "TARGET_LANGUAGE must be one of C or CXX")
    endif()
  endif()

  set(_target_language_C_arg "")
  set(_target_language_C_extension "c")
  set(_target_language_CXX_arg "--cplus")
  set(_target_language_CXX_extension "cxx")

  set(_target_language_arg ${_target_language_${_target_language}_arg})
  set(_target_language_extension ${_target_language_${_target_language}_extension})

  # Set language level
  set(_language_level ${_args_LANGUAGE_LEVEL})
  if(NOT _args_LANGUAGE_LEVEL)
    set(_language_level "3str")
  else()
    if(NOT _language_level MATCHES "^(2|3|3str)$")
      message(FATAL_ERROR "LANGUAGE_LEVEL must be one of 2, 3, or 3str")
    endif()
  endif()

  set(_language_level_2_arg "-2")
  set(_language_level_3_arg "-3")
  set(_language_level_3str_arg "--3str")

  set(_language_level_arg "${_language_level_${_language_level}_arg}")

  set(generated_file "${CMAKE_CURRENT_BINARY_DIR}/${_name}.${_target_language_extension}")
  set_source_files_properties(${generated_file} PROPERTIES GENERATED TRUE)

  set(_output_var ${_name})
  if(_args_OUTPUT_VAR)
      set(_output_var ${_args_OUTPUT_VAR})
  endif()
  set(${_output_var} ${generated_file} PARENT_SCOPE)

  file(RELATIVE_PATH generated_file_relative
      ${CMAKE_BINARY_DIR} ${generated_file})

  set(comment "Generating ${_target_language} source ${generated_file_relative}")

  get_source_file_property(pyx_location ${_source_file} LOCATION)

  # Generated depfile is expected to have the ".dep" extension and be located along
  # side the generated source file.
  set(_depfile ${generated_file}.dep)
  set(_depfile_arg "-M")

  # Set additional flags.
  set(annotate_arg "")
  if(CYTHON_ANNOTATE)
    set(annotate_arg "--annotate")
  endif()

  set(cython_debug_arg "")
  set(line_directives_arg "")
  if(CMAKE_BUILD_TYPE STREQUAL "Debug" OR
     CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    set(cython_debug_arg "--gdb")
    set(line_directives_arg "--line-directives")
  endif()

  string(REGEX REPLACE " " ";" CYTHON_FLAGS_LIST "${CYTHON_FLAGS}")

  # Add the command to run the compiler.
  add_custom_command(
    OUTPUT ${generated_file}
    COMMAND ${CYTHON_EXECUTABLE}
    ARGS
      ${_target_language_arg}
      ${_language_level_arg}
      ${annotate_arg}
      ${cython_debug_arg}
      ${line_directives_arg}
      ${CYTHON_FLAGS_LIST}
      ${_depfile_arg}
      ${pyx_location}
      --output-file ${generated_file}
    DEPENDS
      ${_source_file}
    DEPFILE
      ${_cython_depfile}
    COMMENT ${comment}
  )

  # NOTE(opadron): I thought about making a proper target, but after trying it
  # out, I decided that it would be far too convenient to use the same name as
  # the target for the extension module (e.g.: for single-file modules):
  #
  # ...
  # add_cython_target(_module.pyx)
  # add_library(_module ${_module})
  # ...
  #
  # The above example would not be possible since the "_module" target name
  # would already be taken by the cython target.  Since I can't think of a
  # reason why someone would need the custom target instead of just using the
  # generated file directly, I decided to leave this commented out.
  #
  # add_custom_target(${_name} DEPENDS ${generated_file})
endfunction()

